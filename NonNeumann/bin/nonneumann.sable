Package nonneumann;

Helpers
 tudo = [0..0xffff];
 digito = ['0'..'9'];
 espaco = ' ';
 rc = 13;
 nl = 10;
 tab = 9;
 pt_virg = 59;
 letra = [['a'..'z'] + ['A'..'Z']];
 hexad = ['0'..'9'] | ['A'..'F'] | ['a'..'f'];
 tudo_semnl = [tudo - [nl + rc]];
 nova_linha = [nl + rc];
 tudo_notraco = [tudo - '-'];
 sem_traco_fecha = [tudo -['-' + '}']];
 esq_boxcoment = '{-';
 dir_boxcoment = '-}';  
 
 Tokens
 coment_linha = pt_virg (tudo_semnl)* nova_linha+; 
 coment_box =  esq_boxcoment tudo_notraco* '-' (sem_traco_fecha tudo_notraco* '-'+)* '}';
 entrar = 'entry';
 par_esq = '(';
 par_dir = ')';
 
 /* ALTERAÇÃO! Bem no início do projeto, eu achei que as chaves seriam tokens, mas percebi que
               elas apenas indicavam o fecho. Então alterei as chaves pelos colchetes,
               mas acabei trocando os nomes e mantendo sem perceber os símbolos de chaves que
               estavam entre aspas simples. O que me fez confundir e criar depois outros tokens
               para colchetes, sendo que estes já deveriam ter virados tokens para colchetes.
 colch_e = '{';
 colch_d = '}';
 */
 
 colch_e = '[';
 colch_d = ']';
 funcao = 'function';
 constante = 'const';
 funcao_unica = 'lambda';
 
 /* ALTERAÇÃO! Como eu não alterei os símbolos de chaves pelos símbolos de colchetes anteriormente,
               então acabei criando novos tokens para os colchetes. Sendo que já eram pra existir,
               ao ter feito a subtituição no lugar das chaves. Então, esses novos tokens eu deletei
               e mantive apenas os tokens de colchetes anteriores, e com os símbolos entres aspas simples
               corrigidos para colchetes ao invés de chaves.
 col_esq = '[';
 col_dir = ']';
 */
 
 tipo_int = 'int';
 tipo_real = 'real';
 tipo_bool = 'bool';
 virgula = ',';
 dois_pontos = ':';
 negacao_booleana = '!';
 e = 'and';
 ou = 'or';
 verdade = 'true';
 falso = 'false';
 igual = '=';
 menor_que = '<';
 maior_que = '>';
 soma = '+';
 subt = '-';
 mult = '*';
 div = '/';
 mod = '%';
 se = 'if';
 entao = 'then';
 senao = 'else';
 
 /* ALTERAÇÃO! Durante a primeira etapa encontrei um problema que era: -2 não era identificado como um
               número inteiro, e -3.14 não era identificado como um número real.
               Então para consertar isso, coloquei o símbolo '-' como opcional antes da digitação do
               valor. Mas ao desenvolver o sintático, existiu um conflito entre o token subt na produção
               de subtração, e o '-' opcional que estava na expressão regular dos números.
               Então, tive que remover esse '-' da expressão regular, deixando para o sintático e
               posteriormente o semântico cuidar disto.
 numero_real = '-'? (digito)+ '.' (digito)+ | '-'? (digito)+ 'E' '-'? (digito)+; 
 numero_inteiro = '-'? (digito)+ | '0x' (hexad)+;
 */
 
 numero_real = (digito)+ '.' (digito)+ | (digito)+ 'E' '-'? (digito)+; 
 numero_inteiro = (digito)+ | '0x' (hexad)+;
 identificador = (letra | '_')+ ;
 vazio = (espaco | rc | nl | tab)+;
 
Ignored Tokens
 vazio, coment_linha, coment_box;
 
Productions
 programa =
   inicio {-> New programa([inicio.a_dec_funcao])};

 inicio {-> a_dec_funcao*} =
   {declaracao_de_funcao} dec_funcao* {-> [dec_funcao.a_dec_funcao]};

 dec_funcao {-> a_dec_funcao} =
   {declara_funcao} entrar? [par_um_e]:par_esq funcao [esq]:tipo [mid_esq]:id [par_dois_e]:par_esq [mid_dir]:parametros? [par_dois_d]:par_dir dois_pontos [par_tres_e]:par_esq [dir]:exp [par_tres_d]:par_dir[par_um_d]:par_dir {-> New a_dec_funcao.a_declara_funcao(esq.a_tipo, mid_esq.a_id, [mid_dir.a_parametros], dir.a_exp)};

 id {-> a_id} =
   {identificadores} identificador {-> New a_id.a_identificadores(identificador)};

 tipo {-> a_tipo} =
   {inteiro} tipo_int {-> New a_tipo.a_inteiro(tipo_int)}
  |{real} tipo_real {-> New a_tipo.a_real(tipo_real)}
  |{boolean} tipo_bool {-> New a_tipo.a_boolean(tipo_bool)};

 parametros {-> a_parametros*} =
   {declarando_parametros} parametro lista_parametros* {-> [parametro.a_parametros, lista_parametros.a_parametros]};

 lista_parametros {-> a_parametros} =
   {declarando_mais_parametros} virgula parametro {-> parametro.a_parametros};

 parametro {-> a_parametros} =
   {parametro_simples} [esq]:tipo [dir]:id {-> New a_parametros.a_parametros_simples(esq.a_tipo, dir.a_id)}
  |{parametro_assinatura} assinatura {-> assinatura.a_parametros};

 assinatura {-> a_parametros} =
   {assina} [esq]:tipo [mid]:id par_esq [dir]:parametros_assinatura? par_dir {-> New a_parametros.a_parametro_assinatura(esq.a_tipo, mid.a_id, [dir.a_parametros_assinatura])};

 parametros_assinatura {-> a_parametros_assinatura*} =
   {param_assinatura} parametro_assinatura cont_parametros_assinatura* {-> [parametro_assinatura.a_parametros_assinatura, cont_parametros_assinatura.a_parametros_assinatura]};

 cont_parametros_assinatura {-> a_parametros_assinatura} =
   {declarando_mais_param_assinatura} virgula parametro_assinatura {-> parametro_assinatura.a_parametros_assinatura};

 parametro_assinatura {-> a_parametros_assinatura} =
   {forma_tipo_assinatura} tipo {-> New a_parametros_assinatura.a_forma_tipo_assinatura(tipo.a_tipo)}
  |{nova_assinatura} assinatura {-> New a_parametros_assinatura.a_nova_assinatura(assinatura.a_parametros)};

 exp {-> a_exp} =
   {ir_termos} termos {-> termos.a_exp};
   
 termos {-> a_exp} =
   {num_inteiros} numero_inteiro {-> New a_exp.a_num_inteiros(numero_inteiro)}
  |{num_reais} numero_real {-> New a_exp.a_num_reais(numero_real)}
  |{identificador_param} id {-> New a_exp.a_identificador(id.a_id)}
  |{bool_verdade} verdade {-> New a_exp.a_bool_verdade(verdade)}
  |{bool_falso} falso {-> New a_exp.a_bool_falso(falso)}
  |{bloco_expressao} bloco_exp {-> bloco_exp.a_exp}
  |{chamada_func} chamada {-> chamada.a_exp}
  |{func_unica_lambda} lambda {-> lambda.a_exp};
  
 dconstante {-> a_constante} =
   {const} constante {-> New a_constante.a_const(constante)};
   
 chamada {-> a_exp} =
   {estrut_chamada} [esq]:id par_esq [dir]:lista_exp? par_dir {-> New a_exp.a_chamada(esq.a_id, [dir.a_exp])};
 
 lista_exp {-> a_exp*} =
   {lista_exp} [esq]:exp virgula [dir]:lista_exp {-> [esq.a_exp, dir.a_exp]} |
   {exp} exp {-> [exp.a_exp]};
      
 lista_id {-> a_id*} =
   {lista_id} [esq]:id virgula [dir]:lista_id {-> [esq.a_id, dir.a_id]} |
   {id} id {-> [id.a_id]};
 
 bloco_exp {-> a_exp} =
   {estrutura} par_esq [esq]:lista_dec_cons* [dir]:exp par_dir {-> New a_exp.a_bloco_exp([esq.a_dec_cons], dir.a_exp)};

 lista_dec_cons {-> a_dec_cons*} =
   {lista_dec_cons} dec_cons {-> [dec_cons.a_dec_cons]};

 lambda {-> a_exp} =
   {func_unica_lambda} funcao_unica [par_e_um]:par_esq [esq]:lista_id? [par_d_um]:par_dir dois_pontos [par_e_dois]:par_esq [mid]:exp [par_d_dois]:par_dir colch_e [dir]:lista_exp? colch_d {-> New a_exp.a_func_unica_lambda([esq.a_id], mid.a_exp, [dir.a_exp])};

 dec_cons {-> a_dec_cons} =
   {estrutura_constante} [par_um_e]:par_esq constante [esq]:tipo [mid]:id [par_dois_e]:par_esq [dir]:exp [par_dois_d]:par_dir [par_um_d]:par_dir {-> New a_dec_cons.a_estrutura_constante(esq.a_tipo, mid.a_id, dir.a_exp)};


Abstract Syntax Tree
programa =
   a_dec_funcao*;

a_dec_funcao = 
	{a_declara_funcao} [esq]:a_tipo [mid_esq]:a_id [mid_dir]:a_parametros* [dir]:a_exp;

a_parametros =
	{a_parametros_simples} [esq]:a_tipo [dir]:a_id
	|{a_parametro_assinatura} [esq]:a_tipo [mid]:a_id [dir]:a_parametros_assinatura*;

a_parametros_assinatura =
	{a_forma_tipo_assinatura} a_tipo
	|{a_nova_assinatura} a_parametros;

a_id =
	{a_identificadores} identificador;

a_tipo =
	{a_inteiro} tipo_int 
	|{a_real} tipo_real
	|{a_boolean} tipo_bool;

a_constante =
	{a_const} constante;
	
a_dec_cons =
	{a_estrutura_constante}[esq]:a_tipo [mid]:a_id [dir]:a_exp;
  
a_exp =
	{a_num_inteiros} numero_inteiro
	|{a_num_reais} numero_real
	|{a_identificador} a_id
	|{a_bool_verdade} verdade
	|{a_bool_falso} falso
	|{a_chamada} [esq]:a_id [dir]:a_exp*
	|{a_func_unica_lambda} [esq]:a_id* [mid]:a_exp [dir]:a_exp*
	|{a_bloco_exp}[esq]:a_dec_cons* [dir]:a_exp;